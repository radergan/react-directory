{"version":3,"sources":["components/PageHead.js","App.js","reportWebVitals.js","index.js"],"names":["PageHead","App","useState","searchQuery","setSearchQuery","users","setUsers","getUsers","a","fetch","response","json","myUsers","results","console","log","useEffect","className","Table","border","Head","SearchHeaderCell","onChange","value","TextCell","VirtualBody","height","length","filter","u","full","name","first","last","map","item","Row","Cell","display","alignItems","Avatar","Text","marginLeft","size","location","city","state","email","uuidv4","renderRow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQASeA,MATf,WACI,OACI,gCACI,mDACA,yCAAW,uCAAX,6C,MC2EGC,MAxEf,WAAgB,IAAD,EAE2BC,mBAAS,IAFpC,mBAEJC,EAFI,KAESC,EAFT,OAGeF,mBAAS,IAHxB,mBAGJG,EAHI,KAGGC,EAHH,KAKLC,EAAQ,uCAAG,8BAAAC,EAAA,sEAES,gDAFT,SAGcC,MADL,iDAFT,cAGHC,EAHG,gBAIaA,EAASC,OAJtB,OAIHC,EAJG,OAKTN,EAASM,EAAQC,SALR,kDAQTC,QAAQC,IAAI,KAAIL,UARP,0DAAH,qDAgDd,OApCAM,qBAAU,WACNT,MACD,IAmCC,sBAAKU,UAAU,eAAf,UACI,cAAC,EAAD,IACA,eAACC,EAAA,EAAD,CAAOC,QAAM,EAAb,UACI,eAACD,EAAA,EAAME,KAAP,WACI,cAACF,EAAA,EAAMG,iBAAP,CACIC,SA7BO,SAAAC,GACvBnB,EAAemB,IA6BCA,MAAOpB,IAEX,cAACe,EAAA,EAAMM,SAAP,oBACA,cAACN,EAAA,EAAMM,SAAP,0BAEJ,cAACN,EAAA,EAAMO,YAAP,CAAmBC,OAAQ,IAA3B,UA3CmB,IAAvBvB,EAAYwB,OAAqBtB,EAC9BA,EAAMuB,QAAO,SAAAC,GAChB,IAAMC,EAAI,UAAMD,EAAEE,KAAKC,MAAb,YAAsBH,EAAEE,KAAKE,MAEvC,OAAyB,IADVL,iBAAO,CAACE,GAAO3B,GAChBwB,WAwCeO,KAAI,SAAAC,GAAI,OAhC3B,SAAC,GAAa,IAAZ9B,EAAW,EAAXA,MAChB,OACI,eAACa,EAAA,EAAMkB,IAAP,WACI,eAAClB,EAAA,EAAMmB,KAAP,CAAYC,QAAQ,OAAOC,WAAW,SAAtC,UACI,cAACC,EAAA,EAAD,CAAQT,KAAI,UAAK1B,EAAM0B,KAAKC,MAAhB,YAAyB3B,EAAM0B,KAAKE,QAChD,eAACQ,EAAA,EAAD,CAAMC,WAAY,GAAIC,KAAM,IAA5B,UACKtC,EAAM0B,KAAKC,MADhB,IACwB3B,EAAM0B,KAAKE,WAGvC,eAACf,EAAA,EAAMM,SAAP,WACKnB,EAAMuC,SAASC,KADpB,KAC4BxC,EAAMuC,SAASE,SAE3C,cAAC5B,EAAA,EAAMM,SAAP,UACKnB,EAAM0C,UAXCC,eA8ByBC,CAAU,CAAE5C,MAAO8B,gBC7DzDe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e86c8ea1.chunk.js","sourcesContent":["function PageHead() {\r\n    return (\r\n        <div>\r\n            <h1>Company Directory</h1>\r\n            <p>Use the <b>filter</b> textbox below to find an employee.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageHead","import React, { useState, useEffect } from 'react'\nimport { filter } from \"fuzzaldrin-plus\"\nimport { v4 as uuidv4 } from 'uuid';\nimport { Table, Avatar, Text } from 'evergreen-ui'\nimport PageHead from './components/PageHead'\nimport './App.css';\n\nfunction App() {\n\n    const [searchQuery, setSearchQuery] = useState('');\n    const [users, setUsers] = useState([]);\n\n    const getUsers = async () => {\n        try {\n            let randomUsers = \"https://randomuser.me/api/?results=200&nat=us\";\n            const response = await fetch(randomUsers);\n            const myUsers = await response.json();\n            setUsers(myUsers.results);\n        }\n        catch (err){\n            console.log(err.response);\n        }\n    }\n\n    useEffect(() => {\n        getUsers();\n    }, []);\n    \n    const people = items => {\n        if (searchQuery.length === 0) return users\n        return users.filter(u => {\n            const full = `${u.name.first} ${u.name.last}`;\n            const result = filter([full], searchQuery)\n            return result.length === 1\n        })\n    }\n\n    const handleFilterChange = value => {\n        setSearchQuery(value)\n    }\n\n    const renderRow = ({users}) => {\n        return ( \n            <Table.Row key={uuidv4()}>\n                <Table.Cell display=\"flex\" alignItems=\"center\">\n                    <Avatar name={`${users.name.first} ${users.name.last}`}/>\n                    <Text marginLeft={10} size={300}>\n                        {users.name.first} {users.name.last}\n                    </Text>\n                </Table.Cell>\n                <Table.TextCell>\n                    {users.location.city}, {users.location.state}\n                </Table.TextCell>\n                <Table.TextCell>\n                    {users.email}\n                </Table.TextCell>\n            </Table.Row>\n        )\n    }\n\n    return (   \n        <div className=\"body-context\">\n            <PageHead />   \n            <Table border>\n                <Table.Head>\n                    <Table.SearchHeaderCell\n                        onChange={handleFilterChange}\n                        value={searchQuery}\n                    />\n                    <Table.TextCell>Title</Table.TextCell>\n                    <Table.TextCell>Location</Table.TextCell>\n                </Table.Head>\n                <Table.VirtualBody height={640}>\n                    {people(searchQuery).map(item => renderRow({ users: item }))}\n                </Table.VirtualBody>\n            </Table>\n        </div>\n    )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}